name: CI/CD Pipeline with Docker Deployment

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'push' && 'production' || 'staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ./terraform-files
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Select Terraform Workspace
        working-directory: ./terraform-files
        run: |
          terraform workspace select dev || terraform workspace new dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Terraform Plan
        working-directory: ./terraform-files
        run: terraform plan -out=tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Terraform Apply
        if: github.event_name == 'push'
        working-directory: ./terraform-files
        run: terraform apply -auto-approve tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 033464272864.dkr.ecr.ap-south-1.amazonaws.com

      - name: Build Docker Image
        run: |
          docker build --platform linux/arm64 -t dev-fast-api-repo ./app

      - name: Tag Docker Image
        run: |
          docker tag dev-fast-api-repo:latest 375949729256.dkr.ecr.ap-south-1.amazonaws.com/dev-fast-api-repo:latest

      - name: Push Docker Image to ECR
        run: |
          docker push 375949729256.dkr.ecr.ap-south-1.amazonaws.com/dev-fast-api-repo

      - name: Refresh ASG Instances
        if: github.event_name == 'push'
        working-directory: ./terraform-files
        run: |
          ASG_NAME=$(terraform output -raw asg_name)
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "$ASG_NAME" \
              --region ${{ secrets.AWS_REGION }} \
              --query 'InstanceRefreshes[?Status==`InProgress`].Status' \
              --output text)
            if [ -z "$STATUS" ]; then
              echo "No instance refresh in progress. Proceeding with new refresh."
              break
            fi
            echo "Instance refresh in progress. Waiting..."
            sleep 50
          done
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "$ASG_NAME" \
            --region ${{ secrets.AWS_REGION }} \
            --strategy Rolling \
            --preferences "MinHealthyPercentage=100,InstanceWarmup=300"

      # --- New ECS Deployment Steps ---
      - name: Stop Existing ECS Tasks
        run: |
          TASK_IDS=$(aws ecs list-tasks \
            --cluster my-fargate-service-cluster \
            --service-name my-fargate-service \
            --query "taskArns[]" \
            --output text)
          if [ -n "$TASK_IDS" ]; then
            for TASK_ID in $TASK_IDS; do
              aws ecs stop-task \
                --cluster my-fargate-service-cluster \
                --task $TASK_ID
            done
          fi

      - name: Force New Deployment to ECS
        run: |
          aws ecs update-service \
            --cluster my-fargate-service-cluster \
            --service my-fargate-service \
            --force-new-deployment
